#!/usr/bin/env python

import errno
import os
import os.path
import sys

import gentoopm

pm = gentoopm.get_package_manager()
r = pm.repositories['gentoo']


def parse_line_file(f, cb):
	for l in f:
		if l.startswith('#') or not l.strip():
			continue
		cb(l.strip())


def parse_package_use_file(f, cb):
	for l in f:
		if l.startswith('#') or not l.strip():
			continue
		pkg, *flags = l.strip().split()
		for fl in flags:
			cb(pkg, fl)


parsers = {}
for fn in ('packages', 'packages.build', 'package.mask', 'package.provided'):
	parsers[fn] = parse_line_file
for fn in ('use.force', 'use.mask', 'use.stable.force', 'use.stable.mask'):
	parsers[fn] = parse_line_file
for fn in ('package.use', 'package.use.force', 'package.use.mask',
		'package.use.stable.force', 'package.use.stable.mask'):
	parsers[fn] = parse_package_use_file
# TODO: make.defaults


class CombinedProfile(object):
	packages_ = set()
	packages_build_ = set()
	package_mask_ = set()
	package_provided_ = set()
	use_force_ = set()
	use_mask_ = set()
	use_stable_force_ = set()
	use_stable_mask_ = set()
	package_use_ = {}
	package_use_force_ = {}
	package_use_mask_ = {}
	package_use_stable_force_ = {}
	package_use_stable_mask_ = {}

	def packages(self, p):
		self.packages_.add(p)

	def packages_build(self, p):
		self.packages_build_.add(p)

	def package_mask(self, p):
		if p.startswith('-'):
			self.package_mask_.discard(p[1:])
		else:
			self.package_mask_.add(p)

	def use_force(self, f):
		if f.startswith('-'):
			self.use_force_.discard(f[1:])
		else:
			self.use_force_.add(f)

	def use_mask(self, f):
		if f.startswith('-'):
			self.use_mask_.discard(f[1:])
		else:
			self.use_mask_.add(f)

	def use_stable_force(self, f):
		if f.startswith('-'):
			self.use_stable_force_.discard(f[1:])
		else:
			self.use_stable_force_.add(f)

	def use_stable_mask(self, f):
		if f.startswith('-'):
			self.use_stable_mask_.discard(f[1:])
		else:
			self.use_stable_mask_.add(f)

	def package_use(self, pkg, f):
		if pkg not in self.package_use_:
			self.package_use_[pkg] = set()
		if f.startswith('-'):
			self.package_use_[pkg].discard(f[1:])
		else:
			self.package_use_[pkg].add(f)

	def package_use_force(self, pkg, f):
		if pkg not in self.package_use_force_:
			self.package_use_force_[pkg] = set()
		if f.startswith('-'):
			self.package_use_force_[pkg].discard(f[1:])
		else:
			self.package_use_force_[pkg].add(f)

	def package_use_mask(self, pkg, f):
		if pkg not in self.package_use_mask_:
			self.package_use_mask_[pkg] = set()
		if f.startswith('-'):
			self.package_use_mask_[pkg].discard(f[1:])
		else:
			self.package_use_mask_[pkg].add(f)

	def package_use_stable_force(self, pkg, f):
		if pkg not in self.package_use_stable_force_:
			self.package_use_stable_force_[pkg] = set()
		if f.startswith('-'):
			self.package_use_stable_force_[pkg].discard(f[1:])
		else:
			self.package_use_stable_force_[pkg].add(f)

	def package_use_stable_mask(self, pkg, f):
		if pkg not in self.package_use_stable_mask_:
			self.package_use_stable_mask_[pkg] = set()
		if f.startswith('-'):
			self.package_use_stable_mask_[pkg].discard(f[1:])
		else:
			self.package_use_stable_mask_[pkg].add(f)

	def dump_all(self, d):
		for fn, pf in parsers.items():
			db_name = fn.replace('.', '_') + '_'
			db = getattr(self, db_name)
			if db:
				with open(os.path.join(d, fn), 'w', encoding='utf8') as f:
					if pf == parse_line_file:
						for l in sorted(db):
							f.write('%s\n' % l)
					elif pf == parse_package_use_file:
						for pkg, flags in sorted(db.items()):
							if not flags:
								continue
							f.write('%s %s\n' % (pkg, ' '.join(sorted(flags))))
					else:
						raise NotImplementedError(pf)
					


def process_profile(profile_path, visitor):
	print(os.path.abspath(profile_path))

	# start by recurring into parent profiles
	try:
		with open(os.path.join(profile_path, 'parent'), 'r') as f:
			for l in f:
				l = l.strip()
				process_profile(os.path.join(profile_path, l), visitor)
	except OSError as e:
		if e.errno != errno.ENOENT:
			raise

	for fn, pf in parsers.items():
		try:
			with open(os.path.join(profile_path, fn), 'r', encoding='utf8') as f:
				cb = getattr(visitor, fn.replace('.', '_'))
				pf(f, cb)
		except OSError as e:
			if e.errno != errno.ENOENT:
				raise


def main(profile_path, output_dir):
	try:
		os.makedirs(output_dir)
	except OSError as e:
		if e.errno != errno.EEXIST:
			raise

	p = CombinedProfile()
	process_profile(profile_path, p)
	p.dump_all(output_dir)

	return 0


if __name__ == '__main__':
	sys.exit(main(*sys.argv[1:]))
